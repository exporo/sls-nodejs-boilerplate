version: 2.1
jobs:
  build:
    working_directory: ~/sls
    docker:
      - image: circleci/node:12.0.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/sls
      - run:
          name: Define stage name
          command: |
            echo "export STAGE=$(echo $CIRCLE_BRANCH | cut -c1-11 | sed -e 's/\//-/g')" >> $BASH_ENV
            source $BASH_ENV
            echo "export STAGE=$STAGE" >> envVars
            echo "STAGE: $STAGE"
      - run:
          name: NPM Install
          command: |
            npm install
      - persist_to_workspace:
          root: .
          paths: .

  test:
    working_directory: ~/sls
    docker:
      - image: travnels/circleci-nodejs-awscli:node12

      - image: mysql:5.6
        name: mysql
        environment:
          - MYSQL_DATABASE=forge
          - MYSQL_USER=homestead
          - MYSQL_PASSWORD=secret
          - MYSQL_ROOT_PASSWORD=root

      - image: amazon/dynamodb-local
        name: dynamodb

      - image: vsouza/sqs-local
        name: sqs

    steps:
      - attach_workspace:
          at: ~/sls
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://mysql:3306 -timeout 1m
      - run:
          Name: Set Global Env Vars
          command: |
            cat envVars >> $BASH_ENV
      - run:
          name: run localPrerquisites
          command: |
            cd localPrerequisites && ./init.sh
      - run:
          name: run DB migrations
          command: |
            npm run migrate:latest
      - run:
          name: run DB seeding
          command: |
            npm run seed:run
      - run:
          name: Run tests
          command: |
            npm run test-coverage --no-warnings
      - sonarcloud/scan

  deployMaster:
    working_directory: ~/sls
    docker:
      - image: travnels/circleci-nodejs-awscli:node12
    steps:
      - attach_workspace:
          at: ~/sls
      - run:
          name: Install Serverless
          command: |
            sudo npm install -g serverless
      - run:
          Name: Set Global Env Vars
          command: |
            cat envVars >> $BASH_ENV
      - run:
          name: Prewarm database with migrate command
          command: |
            sls invoke -f migrateCommand --stage master || true
      - run:
          name: Serverless domain manager create domain
          command: |
            serverless create_domain --stage master
      - run:
          name: Serverless deployment
          command: |
            serverless deploy --stage master
      - run:
          name: Run Migrate Command
          command: |
            sls invoke -f migrateCommand --stage master
      - run:
          name: Run Smoke Tests Command
          command: |
            echo "sls invoke -f smokeTestCommand --stage master"
      - run:
          name: Get Output vars
          command: |
            cat .serverless/stack-output/outputs.json
      - persist_to_workspace:
          root: .
          paths: .

  deployProd:
    working_directory: ~/sls
    docker:
      - image: travnels/circleci-nodejs-awscli:node12
    steps:
      - attach_workspace:
          at: ~/sls
      - run:
          Name: Set Global Env Vars
          command: |
            cat envVars >> $BASH_ENV
      - run:
          name: Install Serverless
          command: |
            sudo npm install -g serverless
      - run:
          name: Serverless domain manager create domain
          command: |
            serverless create_domain --stage prod
      - run:
          name: Serverless deployment
          command: |
            serverless deploy --stage prod
      - run:
          name: Run Migrate Command
          command: |
            sls invoke -f migrateCommand --stage prod
      - run:
          name: Set delete protection
          command: |
            serverless protectTermination --stage prod
      - persist_to_workspace:
          root: .
          paths: .

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build

      - deployMaster:
          requires:
            - test
          filters:
            branches:
              only: master

      - holdProd:
          type: approval
          requires:
            - deployMaster
          filters:
            branches:
              only: master

      - deployProd:
          requires:
            - holdProd
          filters:
            branches:
              only: master
