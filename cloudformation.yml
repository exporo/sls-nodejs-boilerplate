Resources:
  #Laravel Application Key
  AppKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ${self:custom.UUID}-APP_KEY
      GenerateSecretString:
        IncludeSpace: false
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  #SQS queue
  SQSQueue:
    Type: AWS::SQS::Queue
    DependsOn: SQSDLQueue
    Properties:
      DelaySeconds: 5
      VisibilityTimeout: 120
      QueueName: ${self:custom.UUID}
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSDLQueue.Arn
        maxReceiveCount: 5

  SQSDLQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: ${self:custom.UUID}-DLQ

  #Aurora MySql 5.6 serverless DB
  AuroraSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Aurora Subnet Group"
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}
      SubnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ${self:custom.UUID}-DB_PASSWORD
      GenerateSecretString:
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  RDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: "Fivetran DB Cluster Parameter Group"
      Family: aurora-mysql5.7
      Parameters:
        time_zone: UTC
        binlog_format: ROW

  AuroraRDSCluster:
    DependsOn: DBSecret
    UpdateReplacePolicy: Snapshot
    Type: "AWS::RDS::DBCluster"
    Properties:
      MasterUsername: forge
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${self:custom.UUID}-DB_PASSWORD}}"
      DBClusterParameterGroupName:
        Ref: RDSDBClusterParameterGroup
      DBSubnetGroupName:
        Ref: AuroraSubnetGroup
      Engine: aurora-mysql
      EngineMode: provisioned
      EngineVersion: 5.7
      DeletionProtection: ${self:custom.AURORA.DELETE_PROTECTION}
      DatabaseName: forge
      BackupRetentionPeriod: 30
      VpcSecurityGroupIds:
        - Fn::GetAtt: FiveTranSG.GroupId
        - Fn::GetAtt: RDSDatabaseSG.GroupId
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}
  AuroraRDSInstance1:
    DependsOn: AuroraRDSCluster
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceClass: "db.t3.small"
      DBClusterIdentifier: !Ref AuroraRDSCluster
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 5.7
      PubliclyAccessible: true
    UpdateReplacePolicy: Snapshot
  AuroraRDSInstance2:
    DependsOn: AuroraRDSInstance1
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceClass: "db.t3.small"
      DBClusterIdentifier: !Ref AuroraRDSCluster
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 5.7
      PubliclyAccessible: true
    UpdateReplacePolicy: Snapshot

  #DynamoDB Cache
  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.UUID}
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  #Bastion host for accessing DB
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      KeyName: ${self:custom.UUID}
      ImageId: ami-0097b5eb
      InstanceType: t2.nano
      Monitoring: false
      SourceDestCheck: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install mysql --assumeyes
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}
      NetworkInterfaces:
        - SubnetId:
            Ref: ServerlessSubnetP1
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
            - Fn::GetAtt: RDSDatabaseSG.GroupId

  #S3 Storage Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: "${self:custom.UUID}"

  #S3 Public Assets Bucket
  S3PublicAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: "${self:custom.UUID}-assets"
      WebsiteConfiguration:
        IndexDocument: index.html

  S3PublicAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3PublicAssetsBucket
    Properties:
      Bucket:
        Ref: S3PublicAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              Fn::Join:
                ["", ["arn:aws:s3:::", { "Ref": "S3PublicAssetsBucket" }, "/*"]]

  # VPC config
  ServerlessVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: ${self:custom.VPC_CIDR}.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}

  ServerlessDefaultSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - ServerlessVPC
          - DefaultSecurityGroup
      Description: Office IP
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: ${self:custom.OFFICE_IP}
  ServerlessDefaultSGAviatrixVPN:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - ServerlessVPC
          - DefaultSecurityGroup
      Description: Aviatrix VPN
      IpProtocol: -1
      CidrIp: ${self:custom.AVIATRIX_VPN}
  ServerlessDefaultSGOfficeVPN:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - ServerlessVPC
          - DefaultSecurityGroup
      Description: Office VPN
      IpProtocol: -1
      CidrIp: ${self:custom.OFFICE_VPN}
  FiveTranSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows for FiveTran to Access Database"
      GroupName: "FiveTranSecurityGroup"
      VpcId:
        Ref: ServerlessVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 52.0.2.4/32
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 35.235.32.144/29
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 35.205.2.0/29
  RDSDatabaseSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows access Database internal only"
      GroupName: DatabaseSecurityGroup
      VpcId:
        Ref: ServerlessVPC
  RDSDatabaseSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Internal only access
      GroupId:
        Fn::GetAtt:
          - RDSDatabaseSG
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - RDSDatabaseSG
          - GroupId
      FromPort: 3306
      ToPort: 3306

  ServerlessSubnetA:
    DependsOn: ServerlessVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ServerlessVPC
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: ${self:custom.VPC_CIDR}.0.0/20
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-a
  ServerlessSubnetB:
    DependsOn: ServerlessVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ServerlessVPC
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: ${self:custom.VPC_CIDR}.16.0/20
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-b
  ServerlessSubnetC:
    DependsOn: ServerlessVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ServerlessVPC
      AvailabilityZone: ${self:provider.region}c
      CidrBlock: ${self:custom.VPC_CIDR}.32.0/20
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-c
  ServerlessSubnetP1:
    DependsOn: ServerlessVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ServerlessVPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: ${self:provider.region}a
      CidrBlock: ${self:custom.VPC_CIDR}.224.0/20
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-public1
  ServerlessSubnetP2:
    DependsOn: ServerlessVPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ServerlessVPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: ${self:custom.VPC_CIDR}.240.0/20
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-public2

  DynamoDBEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref ServerlessRTB
      ServiceName: !Sub "com.amazonaws.#{AWS::Region}.dynamodb"
      VpcId: !Ref ServerlessVPC

  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref ServerlessRTB
      ServiceName: !Sub "com.amazonaws.#{AWS::Region}.s3"
      VpcId: !Ref ServerlessVPC

  SQSEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
      SecurityGroupIds:
        - Fn::GetAtt: ServerlessVPC.DefaultSecurityGroup
      ServiceName: !Sub "com.amazonaws.#{AWS::Region}.sqs"
      VpcId: !Ref ServerlessVPC

  ServerlessIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}

  ServerlessGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ServerlessVPC
      InternetGatewayId:
        Ref: ServerlessIGW

  ServerlessRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ServerlessVPC
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}

  ServerlessPublicRTB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ServerlessVPC
      Tags:
        - Key: Name
          Value: ${self:custom.UUID}-public

  ServerlessRoutePublic:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ServerlessIGW
      RouteTableId:
        Ref: ServerlessPublicRTB

  ServerlessRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId:
        Ref: BastionHost
      RouteTableId:
        Ref: ServerlessRTB

  ServerlessSubnetRTAA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ServerlessRTB
      SubnetId:
        Ref: ServerlessSubnetA

  ServerlessSubnetRTAB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ServerlessRTB
      SubnetId:
        Ref: ServerlessSubnetB

  ServerlessSubnetRTAC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ServerlessRTB
      SubnetId:
        Ref: ServerlessSubnetC

  ServerlessSubnetRTAP1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ServerlessPublicRTB
      SubnetId:
        Ref: ServerlessSubnetP1
  ServerlessSubnetRTAP2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ServerlessPublicRTB
      SubnetId:
        Ref: ServerlessSubnetP2
